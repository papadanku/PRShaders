
texture texture0: TEXLAYER0;
texture texture1: TEXLAYER1;
texture texture2: TEXLAYER2;
texture texture3: TEXLAYER3;
texture texture4: TEXLAYER4;
texture texture5: TEXLAYER5;
texture texture6: TEXLAYER6;
texture texture7: TEXLAYER7;

sampler wrapBilinSamplers0 : register(s0) = sampler_state { Texture = <texture0>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers1 : register(s1) = sampler_state { Texture = <texture1>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers2 : register(s2) = sampler_state { Texture = <texture2>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers3 : register(s3) = sampler_state { Texture = <texture3>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers4 : register(s4) = sampler_state { Texture = <texture4>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers5 : register(s5) = sampler_state { Texture = <texture5>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers6 : register(s6) = sampler_state { Texture = <texture6>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler wrapBilinSamplers7 : register(s7) = sampler_state { Texture = <texture7>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };

#if ALLOW_ANISO_FILTERING_STATICMESH
	#define wrapAnisoSamplers0 _wrapAnisoSamplers0
	#define wrapAnisoSamplers1 _wrapAnisoSamplers1
	#define wrapAnisoSamplers2 _wrapAnisoSamplers2
	#define wrapAnisoSamplers3 _wrapAnisoSamplers3
	#define wrapAnisoSamplers4 _wrapAnisoSamplers4
	#define wrapAnisoSamplers5 _wrapAnisoSamplers5
	#define wrapAnisoSamplers6 _wrapAnisoSamplers6
	#define wrapAnisoSamplers7 _wrapAnisoSamplers7
#else
	#define wrapAnisoSamplers0 wrapBilinSamplers0
	#define wrapAnisoSamplers1 wrapBilinSamplers1
	#define wrapAnisoSamplers2 wrapBilinSamplers2
	#define wrapAnisoSamplers3 wrapBilinSamplers3
	#define wrapAnisoSamplers4 wrapBilinSamplers4
	#define wrapAnisoSamplers5 wrapBilinSamplers5
	#define wrapAnisoSamplers6 wrapBilinSamplers6
	#define wrapAnisoSamplers7 wrapBilinSamplers7
#endif

sampler _wrapAnisoSamplers0 : register(s0) = sampler_state { Texture = <texture0>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers1 : register(s1) = sampler_state { Texture = <texture1>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers2 : register(s2) = sampler_state { Texture = <texture2>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers3 : register(s3) = sampler_state { Texture = <texture3>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers4 : register(s4) = sampler_state { Texture = <texture4>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers5 : register(s5) = sampler_state { Texture = <texture5>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers6 : register(s6) = sampler_state { Texture = <texture6>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };
sampler _wrapAnisoSamplers7 : register(s7) = sampler_state { Texture = <texture7>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = Wrap; AddressV = Wrap; };

sampler clampPointSamplers0 : register(s0) = sampler_state { Texture = <texture0>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers1 : register(s1) = sampler_state { Texture = <texture1>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers2 : register(s2) = sampler_state { Texture = <texture2>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers3 : register(s3) = sampler_state { Texture = <texture3>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers4 : register(s4) = sampler_state { Texture = <texture4>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers5 : register(s5) = sampler_state { Texture = <texture5>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers6 : register(s6) = sampler_state { Texture = <texture6>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };
sampler clampPointSamplers7 : register(s7) = sampler_state { Texture = <texture7>; MinFilter = Point; MagFilter = Point; MipFilter = Point; AddressU = Clamp; AddressV = Clamp; };

sampler clampBilinSamplers0 : register(s0) = sampler_state { Texture = <texture0>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers1 : register(s1) = sampler_state { Texture = <texture1>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers2 : register(s2) = sampler_state { Texture = <texture2>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers3 : register(s3) = sampler_state { Texture = <texture3>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers4 : register(s4) = sampler_state { Texture = <texture4>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers5 : register(s5) = sampler_state { Texture = <texture5>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers6 : register(s6) = sampler_state { Texture = <texture6>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };
sampler clampBilinSamplers7 : register(s7) = sampler_state { Texture = <texture7>; MinFilter = Linear; MagFilter = Linear; MipFilter = Linear; AddressU = Clamp; AddressV = Clamp; };

#if ALLOW_ANISO_FILTERING_STATICMESH
	#define clampAnisoSamplers0 _clampAnisoSamplers0
	#define clampAnisoSamplers1 _clampAnisoSamplers1
	#define clampAnisoSamplers2 _clampAnisoSamplers2
	#define clampAnisoSamplers3 _clampAnisoSamplers3
	#define clampAnisoSamplers4 _clampAnisoSamplers4
	#define clampAnisoSamplers5 _clampAnisoSamplers5
	#define clampAnisoSamplers6 _clampAnisoSamplers6
	#define clampAnisoSamplers7 _clampAnisoSamplers7
#else
	#define clampAnisoSamplers0 clampBilinSamplers0
	#define clampAnisoSamplers1 clampBilinSamplers1
	#define clampAnisoSamplers2 clampBilinSamplers2
	#define clampAnisoSamplers3 clampBilinSamplers3
	#define clampAnisoSamplers4 clampBilinSamplers4
	#define clampAnisoSamplers5 clampBilinSamplers5
	#define clampAnisoSamplers6 clampBilinSamplers6
	#define clampAnisoSamplers7 clampBilinSamplers7
#endif

sampler _clampAnisoSamplers0 : register(s0) = sampler_state { Texture = <texture0>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers1 : register(s1) = sampler_state { Texture = <texture1>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers2 : register(s2) = sampler_state { Texture = <texture2>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers3 : register(s3) = sampler_state { Texture = <texture3>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers4 : register(s4) = sampler_state { Texture = <texture4>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers5 : register(s5) = sampler_state { Texture = <texture5>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers6 : register(s6) = sampler_state { Texture = <texture6>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
sampler _clampAnisoSamplers7 : register(s7) = sampler_state { Texture = <texture7>; MaxAnisotropy = 8; MinFilter = Anisotropic; MagFilter = Linear; MipFilter = Linear; AddressU = CLAMP; AddressV = CLAMP; };
